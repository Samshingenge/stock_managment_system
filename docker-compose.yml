version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stock_management_db
    environment:
      POSTGRES_DB: stock_management
      POSTGRES_USER: stockuser
      POSTGRES_PASSWORD: stockpass123
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01_init.sql
      - ./database/sample_data.sql:/docker-entrypoint-initdb.d/02_sample_data.sql
    ports:
      - "5432:5432"
    networks:
      - stock_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stockuser -d stock_management"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stock_management_api
    environment:
      DATABASE_URL: postgresql://stockuser:stockpass123@postgres:5432/stock_management
      SECRET_KEY: dev-secret-key-change-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      CORS_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
      DEBUG: "true"
    volumes:
      - ./backend:/app
      - backend_venv:/app/.venv
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - stock_network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python -c 'import time; import psycopg2; 
        while True:
          try: 
            psycopg2.connect(host=\"postgres\", database=\"stock_management\", user=\"stockuser\", password=\"stockpass123\"); 
            break
          except psycopg2.OperationalError: 
            time.sleep(1)' &&
        echo 'Database ready!' &&
        cd /app &&
        python -m pip install --upgrade pip &&
        pip install -r requirements.txt &&
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stock_management_frontend
    environment:
      REACT_APP_API_URL: http://localhost:8000/api
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
    volumes:
      - ./frontend:/app
      - frontend_modules:/app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - stock_network
    stdin_open: true
    tty: true

  # pgAdmin (Optional - Database Management UI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: stock_management_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@stockmanagement.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - stock_network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  backend_venv:
    driver: local
  frontend_modules:
    driver: local

networks:
  stock_network:
    driver: bridge
    name: stock_management_network